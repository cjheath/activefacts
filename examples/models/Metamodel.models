
module Concernz
  module Aggregation
    extend ActiveSupport::Concern
    included do
      self.primary_key = 'aggregation_id'

      # Aggregation (in which Variable is bound to Aggregate over aggregated-Variable)
      belongs_to :aggregated_variable, :class_name => 'Variable', :foreign_key => :aggregated_variable_id

      # Aggregation (in which Variable is bound to Aggregate over aggregated-Variable)
      belongs_to :variable

      validates :aggregate_code, :presence => true
      validates :variable_id, :presence => true
      validates :aggregated_variable_id, :presence => true
    end
  end
end

module Concernz
  module AllowedRange
    extend ActiveSupport::Concern
    included do
      self.primary_key = 'allowed_range_id'

      # Allowed Range (in which Value Constraint allows Value Range) and Value Constraint is a kind of Constraint and Constraint is an instance of Concept
      belongs_to :concept_via_value_constraint_constraint, :class_name => 'Concept', :foreign_key => :value_constraint_concept_guid

      # Allowed Range (in which Value Constraint allows Value Range) and Value Range has maximum-Bound and Bound has Value
      belongs_to :value_via_value_range_maximum_bound, :class_name => 'Value', :foreign_key => :value_range_maximum_bound_value_id

      # Allowed Range (in which Value Constraint allows Value Range) and Value Range has minimum-Bound and Bound has Value
      belongs_to :value_via_value_range_minimum_bound, :class_name => 'Value', :foreign_key => :value_range_minimum_bound_value_id

      validates :value_constraint_concept_guid, :presence => true
    end
  end
end

module Concernz
  module AlternativeSet
    extend ActiveSupport::Concern
    included do
      self.primary_key = 'guid'

      # Step falls under Alternative Set
      has_many :steps, :class_name => 'Step', :foreign_key => :alternative_set_guid, :dependent => :destroy
    end
  end
end

module Concernz
  module Concept
    extend ActiveSupport::Concern
    included do
      self.primary_key = 'guid'

      # Context Note is an instance of Concept and Context Note applies to relevant-Concept
      belongs_to :relevant_concept_via_context_note, :class_name => 'Concept', :foreign_key => :context_note_relevant_concept_guid

      # Instance is an instance of Concept and Instance objectifies Fact and Fact is an instance of Concept
      belongs_to :concept_via_instance_fact, :class_name => 'Concept', :foreign_key => :instance_fact_concept_guid

      # Fact is an instance of Concept and Fact is of Fact Type
      belongs_to :fact_type_via_fact, :class_name => 'FactType', :foreign_key => :fact_type_concept_guid

      # Instance is an instance of Concept and Instance is of Object Type
      belongs_to :object_type_via_instance, :class_name => 'ObjectType', :foreign_key => :instance_object_type_id

      # Fact is an instance of Concept and Population includes Fact
      belongs_to :population_via_fact, :class_name => 'Population', :foreign_key => :fact_population_id

      # Instance is an instance of Concept and Population includes Instance
      belongs_to :population_via_instance, :class_name => 'Population', :foreign_key => :instance_population_id

      # Constraint is an instance of Concept and Ring Constraint is a kind of Constraint and Ring Constraint has other-Role
      belongs_to :other_role_via_constraint_ring_constraint, :class_name => 'Role', :foreign_key => :ring_constraint_other_role_id

      # Constraint is an instance of Concept and Ring Constraint is a kind of Constraint and Role is of Ring Constraint
      belongs_to :role_via_constraint_ring_constraint, :class_name => 'Role', :foreign_key => :ring_constraint_role_id

      # Constraint is an instance of Concept and Value Constraint is a kind of Constraint and Role has role-Value Constraint
      belongs_to :role_via_constraint_value_constraint, :class_name => 'Role', :foreign_key => :value_constraint_role_id

      # Constraint is an instance of Concept and Presence Constraint is a kind of Constraint and Presence Constraint covers Role Sequence
      belongs_to :role_sequence_via_constraint_presence_constraint, :class_name => 'RoleSequence', :foreign_key => :presence_constraint_role_sequence_guid

      # Constraint is an instance of Concept and Set Constraint is a kind of Constraint and Subset Constraint is a kind of Set Constraint and Subset Constraint covers subset-Role Sequence
      belongs_to :subset_role_sequence_via_constraint_set_constraint_subset_constraint, :class_name => 'RoleSequence', :foreign_key => :subset_constraint_subset_role_sequence_guid

      # Constraint is an instance of Concept and Set Constraint is a kind of Constraint and Subset Constraint is a kind of Set Constraint and Subset Constraint covers superset-Role Sequence
      belongs_to :superset_role_sequence_via_constraint_set_constraint_subset_constraint, :class_name => 'RoleSequence', :foreign_key => :subset_constraint_superset_role_sequence_guid

      # Instance is an instance of Concept and Instance has Value
      belongs_to :value_via_instance, :class_name => 'Value', :foreign_key => :instance_value_id

      # Allowed Range (in which Value Constraint allows Value Range) and Value Constraint is a kind of Constraint and Constraint is an instance of Concept
      has_many :allowed_ranges_via_value_constraint_constraint, :class_name => 'AllowedRange', :foreign_key => :value_constraint_concept_guid, :dependent => :destroy

      # Context Note is an instance of Concept and Context Note applies to relevant-Concept
      has_many :concepts_via_context_note, :class_name => 'Concept', :foreign_key => :context_note_relevant_concept_guid, :dependent => :destroy

      # Instance is an instance of Concept and Instance objectifies Fact and Fact is an instance of Concept
      has_one :concept_via_instance_fact, :class_name => 'Concept', :foreign_key => :instance_fact_concept_guid, :dependent => :destroy

      # Context According To (in which Context Note is according to Agent) and Context Note is an instance of Concept
      has_many :context_according_tos_via_context_note, :class_name => 'ContextAccordingTo', :foreign_key => :context_note_concept_guid, :dependent => :destroy

      # Context Agreed By (in which Agreement was reached by Agent) and Context Note was added by Agreement and Context Note is an instance of Concept
      has_many :context_agreed_bies_via_agreement_context_note, :class_name => 'ContextAgreedBy', :foreign_key => :agreement_context_note_concept_guid, :dependent => :destroy

      # Derivation (in which Unit is derived from base-Unit) and Unit is an instance of Concept
      has_many :derivations_via_unit, :class_name => 'Derivation', :foreign_key => :base_unit_concept_guid, :dependent => :destroy

      # Derivation (in which Unit is derived from base-Unit) and Unit is an instance of Concept
      has_many :derivations_via_unit, :class_name => 'Derivation', :foreign_key => :derived_unit_concept_guid, :dependent => :destroy

      # Fact Type is an instance of Concept
      has_one :fact_type, :class_name => 'FactType', :foreign_key => :concept_guid, :dependent => :destroy

      # Object Type is an instance of Concept
      has_one :object_type, :class_name => 'ObjectType', :foreign_key => :concept_guid, :dependent => :destroy

      # Domain Object Type is a kind of Object Type and Value Type is a kind of Domain Object Type and Value Type is of Unit and Unit is an instance of Concept
      has_many :object_types_via_domain_object_type_value_type_unit, :class_name => 'ObjectType', :foreign_key => :value_type_unit_concept_guid, :dependent => :destroy

      # Domain Object Type is a kind of Object Type and Value Type is a kind of Domain Object Type and Value Type has Value Constraint and Value Constraint is a kind of Constraint and Constraint is an instance of Concept
      has_one :object_type_via_domain_object_type_value_type_value_constraint_constraint, :class_name => 'ObjectType', :foreign_key => :value_type_value_constraint_concept_guid, :dependent => :destroy

      # Population is an instance of Concept
      has_one :population, :class_name => 'Population', :foreign_key => :concept_guid, :dependent => :destroy

      # Role Value fulfils Fact and Fact is an instance of Concept
      has_many :role_values_via_fact, :class_name => 'RoleValue', :foreign_key => :fact_concept_guid, :dependent => :destroy

      # Instance plays Role Value and Instance is an instance of Concept
      has_many :role_values_via_instance, :class_name => 'RoleValue', :foreign_key => :instance_concept_guid, :dependent => :destroy

      # Role is an instance of Concept
      has_one :role, :class_name => 'Role', :foreign_key => :concept_guid, :dependent => :destroy

      # Set Comparison Roles (in which Set Comparison Constraint has in Ordinal position Role Sequence) and Set Comparison Constraint is a kind of Set Constraint and Set Constraint is a kind of Constraint and Constraint is an instance of Concept
      has_many :set_comparison_roles_via_set_comparison_constraint_set_constraint_constraint, :class_name => 'SetComparisonRoles', :foreign_key => :set_comparison_constraint_concept_guid, :dependent => :destroy

      # Constraint Shape is a kind of Shape and Constraint Shape is for Constraint and Constraint is an instance of Concept
      has_many :shapes_via_constraint_shape_constraint, :class_name => 'Shape', :foreign_key => :constraint_shape_constraint_concept_guid, :dependent => :destroy

      # Model Note Shape is a kind of Shape and Model Note Shape is for Context Note and Context Note is an instance of Concept
      has_many :shapes_via_model_note_shape_context_note, :class_name => 'Shape', :foreign_key => :model_note_shape_context_note_concept_guid, :dependent => :destroy

      # Value is in Unit and Unit is an instance of Concept
      has_many :values_via_unit, :class_name => 'Value', :foreign_key => :unit_concept_guid, :dependent => :destroy

      # Query includes Variable and Query is an instance of Concept
      has_many :variables_via_query, :class_name => 'Variable', :foreign_key => :query_concept_guid, :dependent => :destroy
    end
  end
end

module Concernz
  module ContextAccordingTo
    extend ActiveSupport::Concern
    included do
      self.primary_key = 'context_according_to_id'

      # Context According To (in which Context Note is according to Agent) and Context Note is an instance of Concept
      belongs_to :concept_via_context_note, :class_name => 'Concept', :foreign_key => :context_note_concept_guid

      validates :agent_name, :presence => true
      validates :context_note_concept_guid, :presence => true
    end
  end
end

module Concernz
  module ContextAgreedBy
    extend ActiveSupport::Concern
    included do
      self.primary_key = 'context_agreed_by_id'

      # Context Agreed By (in which Agreement was reached by Agent) and Context Note was added by Agreement and Context Note is an instance of Concept
      belongs_to :concept_via_agreement_context_note, :class_name => 'Concept', :foreign_key => :agreement_context_note_concept_guid

      validates :agent_name, :presence => true
      validates :agreement_context_note_concept_guid, :presence => true
    end
  end
end

module Concernz
  module Derivation
    extend ActiveSupport::Concern
    included do
      self.primary_key = 'derivation_id'

      # Derivation (in which Unit is derived from base-Unit) and Unit is an instance of Concept
      belongs_to :concept_via_unit, :class_name => 'Concept', :foreign_key => :base_unit_concept_guid

      # Derivation (in which Unit is derived from base-Unit) and Unit is an instance of Concept
      belongs_to :concept_via_unit, :class_name => 'Concept', :foreign_key => :derived_unit_concept_guid

      validates :base_unit_concept_guid, :presence => true
      validates :derived_unit_concept_guid, :presence => true
    end
  end
end

module Concernz
  module Diagram
    extend ActiveSupport::Concern
    included do
      self.primary_key = 'diagram_id'

      # Shape is in ORM Diagram and ORM Diagram is a kind of Diagram
      has_many :shapes_via_orm_diagram, :class_name => 'Shape', :foreign_key => :orm_diagram_id, :dependent => :destroy

      validates :name, :presence => true
      validates :vocabulary_name, :presence => true
    end
  end
end

module Concernz
  module Facet
    extend ActiveSupport::Concern
    included do
      self.primary_key = 'facet_id'

      # Facet requires value of facet-Value Type and Value Type is a kind of Domain Object Type and Domain Object Type is a kind of Object Type
      belongs_to :object_type_via_value_type_domain_object_type, :class_name => 'ObjectType', :foreign_key => :facet_value_type_object_type_id

      # Facet (in which Value Type has facet called Name) and Value Type is a kind of Domain Object Type and Domain Object Type is a kind of Object Type
      belongs_to :object_type_via_value_type_domain_object_type, :class_name => 'ObjectType', :foreign_key => :value_type_object_type_id

      # Facet Restriction (in which Value Type applies Facet)
      has_many :facet_restrictions, :class_name => 'FacetRestriction', :foreign_key => :facet_id, :dependent => :destroy

      validates :name, :presence => true
      validates :value_type_object_type_id, :presence => true
      validates :facet_value_type_object_type_id, :presence => true
    end
  end
end

module Concernz
  module FacetRestriction
    extend ActiveSupport::Concern
    included do
      self.primary_key = 'facet_restriction_id'

      # Facet Restriction (in which Value Type applies Facet)
      belongs_to :facet

      # Facet Restriction (in which Value Type applies Facet) and Value Type is a kind of Domain Object Type and Domain Object Type is a kind of Object Type
      belongs_to :object_type_via_value_type_domain_object_type, :class_name => 'ObjectType', :foreign_key => :value_type_object_type_id

      # Facet Restriction has Value
      belongs_to :value

      validates :facet_id, :presence => true
      validates :value_id, :presence => true
      validates :value_type_object_type_id, :presence => true
    end
  end
end

module Concernz
  module FactType
    extend ActiveSupport::Concern
    included do
      self.primary_key = 'concept_guid'

      # Fact Type is an instance of Concept
      belongs_to :concept

      # Entity Type nests Fact Type and Entity Type is a kind of Domain Object Type and Domain Object Type is a kind of Object Type
      belongs_to :object_type_via_entity_type_domain_object_type, :class_name => 'ObjectType', :foreign_key => :entity_type_object_type_id

      # Type Inheritance is a kind of Fact Type and Type Inheritance (in which Entity Type is subtype of super-Entity Type) and Entity Type is a kind of Domain Object Type and Domain Object Type is a kind of Object Type
      belongs_to :object_type_via_type_inheritance_entity_type_domain_object_type, :class_name => 'ObjectType', :foreign_key => :type_inheritance_subtype_object_type_id

      # Type Inheritance is a kind of Fact Type and Type Inheritance (in which Entity Type is subtype of super-Entity Type) and Entity Type is a kind of Domain Object Type and Domain Object Type is a kind of Object Type
      belongs_to :object_type_via_type_inheritance_entity_type_domain_object_type, :class_name => 'ObjectType', :foreign_key => :type_inheritance_supertype_object_type_id

      # Fact is an instance of Concept and Fact is of Fact Type
      has_many :concepts_via_fact, :class_name => 'Concept', :foreign_key => :fact_type_concept_guid, :dependent => :destroy

      # Fact Type has Reading
      has_many :readings, :class_name => 'Reading', :foreign_key => :fact_type_concept_guid, :dependent => :destroy

      # Role belongs to Fact Type
      has_many :roles, :class_name => 'Role', :foreign_key => :fact_type_concept_guid, :dependent => :destroy

      # Role Proxy is a kind of Role and Link Fact Type has Role Proxy and Link Fact Type is a kind of Fact Type
      has_one :role_via_role_proxy_link_fact_type, :class_name => 'Role', :foreign_key => :role_proxy_link_fact_type_concept_guid, :dependent => :destroy

      # Fact Type Shape is a kind of Shape and Fact Type Shape is for Fact Type
      has_many :shapes_via_fact_type_shape, :class_name => 'Shape', :foreign_key => :fact_type_shape_fact_type_concept_guid, :dependent => :destroy

      # Step specifies Fact Type
      has_many :steps, :class_name => 'Step', :foreign_key => :fact_type_concept_guid, :dependent => :destroy

      validates :concept_guid, :presence => true
    end
  end
end

module Concernz
  module ObjectType
    extend ActiveSupport::Concern
    included do
      self.primary_key = 'object_type_id'

      # Domain Object Type is a kind of Object Type and Value Type is a kind of Domain Object Type and Value Type has Value Constraint and Value Constraint is a kind of Constraint and Constraint is an instance of Concept
      belongs_to :concept_via_domain_object_type_value_type_value_constraint_constraint, :class_name => 'Concept', :foreign_key => :value_type_value_constraint_concept_guid

      # Object Type is an instance of Concept
      belongs_to :concept

      # Domain Object Type is a kind of Object Type and Value Type is a kind of Domain Object Type and Value Type is of Unit and Unit is an instance of Concept
      belongs_to :concept_via_domain_object_type_value_type_unit, :class_name => 'Concept', :foreign_key => :value_type_unit_concept_guid

      # Domain Object Type is a kind of Object Type and Value Type is a kind of Domain Object Type and Value Type is subtype of super-Value Type and Value Type is a kind of Domain Object Type and Domain Object Type is a kind of Object Type
      belongs_to :object_type_via_domain_object_type_value_type_value_type_domain_object_type, :class_name => 'ObjectType', :foreign_key => :value_type_supertype_object_type_id

      # Instance is an instance of Concept and Instance is of Object Type
      has_many :concepts_via_instance, :class_name => 'Concept', :foreign_key => :instance_object_type_id, :dependent => :destroy

      # Facet Restriction (in which Value Type applies Facet) and Value Type is a kind of Domain Object Type and Domain Object Type is a kind of Object Type
      has_many :facet_restrictions_via_value_type_domain_object_type, :class_name => 'FacetRestriction', :foreign_key => :value_type_object_type_id, :dependent => :destroy

      # Facet requires value of facet-Value Type and Value Type is a kind of Domain Object Type and Domain Object Type is a kind of Object Type
      has_many :facets_via_value_type_domain_object_type, :class_name => 'Facet', :foreign_key => :facet_value_type_object_type_id, :dependent => :destroy

      # Facet (in which Value Type has facet called Name) and Value Type is a kind of Domain Object Type and Domain Object Type is a kind of Object Type
      has_many :facets_via_value_type_domain_object_type, :class_name => 'Facet', :foreign_key => :value_type_object_type_id, :dependent => :destroy

      # Entity Type nests Fact Type and Entity Type is a kind of Domain Object Type and Domain Object Type is a kind of Object Type
      has_one :fact_type_via_entity_type_domain_object_type, :class_name => 'FactType', :foreign_key => :entity_type_object_type_id, :dependent => :destroy

      # Type Inheritance is a kind of Fact Type and Type Inheritance (in which Entity Type is subtype of super-Entity Type) and Entity Type is a kind of Domain Object Type and Domain Object Type is a kind of Object Type
      has_many :fact_types_via_type_inheritance_entity_type_domain_object_type, :class_name => 'FactType', :foreign_key => :type_inheritance_subtype_object_type_id, :dependent => :destroy
      has_many :entity_types, :through => :fact_types_via_type_inheritance_entity_type_domain_object_type

      # Type Inheritance is a kind of Fact Type and Type Inheritance (in which Entity Type is subtype of super-Entity Type) and Entity Type is a kind of Domain Object Type and Domain Object Type is a kind of Object Type
      has_many :fact_types_via_type_inheritance_entity_type_domain_object_type, :class_name => 'FactType', :foreign_key => :type_inheritance_supertype_object_type_id, :dependent => :destroy
      has_many :entity_types, :through => :fact_types_via_type_inheritance_entity_type_domain_object_type

      # Domain Object Type is a kind of Object Type and Value Type is a kind of Domain Object Type and Value Type is subtype of super-Value Type and Value Type is a kind of Domain Object Type and Domain Object Type is a kind of Object Type
      has_many :object_types_via_domain_object_type_value_type_value_type_domain_object_type, :class_name => 'ObjectType', :foreign_key => :value_type_supertype_object_type_id, :dependent => :destroy

      # Object Type plays Role
      has_many :roles, :class_name => 'Role', :foreign_key => :object_type_id, :dependent => :destroy

      # Object Type Shape is a kind of Shape and Object Type Shape is for Object Type
      has_many :shapes_via_object_type_shape, :class_name => 'Shape', :foreign_key => :object_type_shape_object_type_id, :dependent => :destroy

      # Value is of Value Type and Value Type is a kind of Domain Object Type and Domain Object Type is a kind of Object Type
      has_many :values_via_value_type_domain_object_type, :class_name => 'Value', :foreign_key => :value_type_object_type_id, :dependent => :destroy

      # Variable is for Object Type
      has_many :variables, :class_name => 'Variable', :foreign_key => :object_type_id, :dependent => :destroy

      validates :concept_guid, :presence => true
      validates :name, :presence => true
      validates :vocabulary_name, :presence => true
    end
  end
end

module Concernz
  module Play
    extend ActiveSupport::Concern
    included do
      self.primary_key = 'play_id'

      # Play (in which Variable is restricted by Role)
      belongs_to :role

      # Step involves incidental-Play
      belongs_to :step

      # Play (in which Variable is restricted by Role)
      belongs_to :variable

      # Play projects Role Ref
      has_one :role_ref, :class_name => 'RoleRef', :foreign_key => :play_id, :dependent => :destroy

      # Step has input-Play
      has_many :steps, :class_name => 'Step', :foreign_key => :input_play_id, :dependent => :destroy

      # Step has output-Play
      has_many :steps, :class_name => 'Step', :foreign_key => :output_play_id, :dependent => :destroy

      validates :role_id, :presence => true
      validates :variable_id, :presence => true
    end
  end
end

module Concernz
  module Population
    extend ActiveSupport::Concern
    included do
      self.primary_key = 'population_id'

      # Population is an instance of Concept
      belongs_to :concept

      # Fact is an instance of Concept and Population includes Fact
      has_many :concepts_via_fact, :class_name => 'Concept', :foreign_key => :fact_population_id, :dependent => :destroy

      # Instance is an instance of Concept and Population includes Instance
      has_many :concepts_via_instance, :class_name => 'Concept', :foreign_key => :instance_population_id, :dependent => :destroy

      # Population includes Role Value
      has_many :role_values, :class_name => 'RoleValue', :foreign_key => :population_id, :dependent => :destroy

      validates :concept_guid, :presence => true
      validates :name, :presence => true
    end
  end
end

module Concernz
  module Reading
    extend ActiveSupport::Concern
    included do
      self.primary_key = 'reading_id'

      # Fact Type has Reading
      belongs_to :fact_type

      # Reading is in Role Sequence
      belongs_to :role_sequence

      # Reading Shape is a kind of Shape and Reading Shape is for Reading
      has_many :shapes_via_reading_shape, :class_name => 'Shape', :foreign_key => :reading_shape_reading_id, :dependent => :destroy

      validates :fact_type_concept_guid, :presence => true
      validates :ordinal, :presence => true
      validates :role_sequence_guid, :presence => true
      validates :text, :presence => true
    end
  end
end

module Concernz
  module Role
    extend ActiveSupport::Concern
    included do
      self.primary_key = 'role_id'

      # Role is an instance of Concept
      belongs_to :concept

      # Role Proxy is a kind of Role and Link Fact Type has Role Proxy and Link Fact Type is a kind of Fact Type
      belongs_to :fact_type_via_role_proxy_link_fact_type, :class_name => 'FactType', :foreign_key => :role_proxy_link_fact_type_concept_guid

      # Role belongs to Fact Type
      belongs_to :fact_type

      # Object Type plays Role
      belongs_to :object_type

      # Role Proxy is a kind of Role and Role Proxy is for Role
      belongs_to :role_via_role_proxy, :class_name => 'Role', :foreign_key => :role_proxy_role_id

      # Constraint is an instance of Concept and Ring Constraint is a kind of Constraint and Ring Constraint has other-Role
      has_many :concepts_via_constraint_ring_constraint, :class_name => 'Concept', :foreign_key => :ring_constraint_other_role_id, :dependent => :destroy

      # Constraint is an instance of Concept and Ring Constraint is a kind of Constraint and Role is of Ring Constraint
      has_many :concepts_via_constraint_ring_constraint, :class_name => 'Concept', :foreign_key => :ring_constraint_role_id, :dependent => :destroy

      # Constraint is an instance of Concept and Value Constraint is a kind of Constraint and Role has role-Value Constraint
      has_one :concept_via_constraint_value_constraint, :class_name => 'Concept', :foreign_key => :value_constraint_role_id, :dependent => :destroy

      # Play (in which Variable is restricted by Role)
      has_many :plays, :class_name => 'Play', :foreign_key => :role_id, :dependent => :destroy

      # Role Display (in which Fact Type Shape displays Role in Ordinal position)
      has_many :role_displays, :class_name => 'RoleDisplay', :foreign_key => :role_id, :dependent => :destroy

      # Role Ref (in which Role Sequence in Ordinal position includes Role)
      has_many :role_refs, :class_name => 'RoleRef', :foreign_key => :role_id, :dependent => :destroy

      # Role Value is of Role
      has_many :role_values, :class_name => 'RoleValue', :foreign_key => :role_id, :dependent => :destroy

      # Role Proxy is a kind of Role and Role Proxy is for Role
      has_one :role_via_role_proxy, :class_name => 'Role', :foreign_key => :role_proxy_role_id, :dependent => :destroy

      # Variable projects Role
      has_one :variable, :class_name => 'Variable', :foreign_key => :projection_id, :dependent => :destroy

      validates :concept_guid, :presence => true
      validates :fact_type_concept_guid, :presence => true
      validates :object_type_id, :presence => true
      validates :ordinal, :presence => true
    end
  end
end

module Concernz
  module RoleDisplay
    extend ActiveSupport::Concern
    included do
      self.primary_key = 'role_display_id'

      # Role Display (in which Fact Type Shape displays Role in Ordinal position)
      belongs_to :role

      # Role Display (in which Fact Type Shape displays Role in Ordinal position) and Fact Type Shape is a kind of Shape
      belongs_to :shape_via_fact_type_shape, :class_name => 'Shape', :foreign_key => :fact_type_shape_guid

      # Role Name Shape is a kind of Shape and Role Name Shape is for Role Display
      has_one :shape_via_role_name_shape, :class_name => 'Shape', :foreign_key => :role_name_shape_role_display_id, :dependent => :destroy

      # Constraint Shape is a kind of Shape and Value Constraint Shape is a kind of Constraint Shape and Role Display has Value Constraint Shape
      has_one :shape_via_constraint_shape_value_constraint_shape, :class_name => 'Shape', :foreign_key => :value_constraint_shape_role_display_id, :dependent => :destroy

      validates :fact_type_shape_guid, :presence => true
      validates :ordinal, :presence => true
      validates :role_id, :presence => true
    end
  end
end

module Concernz
  module RoleRef
    extend ActiveSupport::Concern
    included do
      self.primary_key = 'role_ref_id'

      # Play projects Role Ref
      belongs_to :play

      # Role Ref (in which Role Sequence in Ordinal position includes Role)
      belongs_to :role

      # Role Ref (in which Role Sequence in Ordinal position includes Role)
      belongs_to :role_sequence

      validates :ordinal, :presence => true
      validates :role_id, :presence => true
      validates :role_sequence_guid, :presence => true
    end
  end
end

module Concernz
  module RoleSequence
    extend ActiveSupport::Concern
    included do
      self.primary_key = 'guid'

      # Constraint is an instance of Concept and Presence Constraint is a kind of Constraint and Presence Constraint covers Role Sequence
      has_many :concepts_via_constraint_presence_constraint, :class_name => 'Concept', :foreign_key => :presence_constraint_role_sequence_guid, :dependent => :destroy

      # Constraint is an instance of Concept and Set Constraint is a kind of Constraint and Subset Constraint is a kind of Set Constraint and Subset Constraint covers subset-Role Sequence
      has_many :concepts_via_constraint_set_constraint_subset_constraint, :class_name => 'Concept', :foreign_key => :subset_constraint_subset_role_sequence_guid, :dependent => :destroy

      # Constraint is an instance of Concept and Set Constraint is a kind of Constraint and Subset Constraint is a kind of Set Constraint and Subset Constraint covers superset-Role Sequence
      has_many :concepts_via_constraint_set_constraint_subset_constraint, :class_name => 'Concept', :foreign_key => :subset_constraint_superset_role_sequence_guid, :dependent => :destroy

      # Reading is in Role Sequence
      has_many :readings, :class_name => 'Reading', :foreign_key => :role_sequence_guid, :dependent => :destroy

      # Role Ref (in which Role Sequence in Ordinal position includes Role)
      has_many :role_refs, :class_name => 'RoleRef', :foreign_key => :role_sequence_guid, :dependent => :destroy

      # Set Comparison Roles (in which Set Comparison Constraint has in Ordinal position Role Sequence)
      has_many :set_comparison_roles, :class_name => 'SetComparisonRoles', :foreign_key => :role_sequence_guid, :dependent => :destroy
    end
  end
end

module Concernz
  module RoleValue
    extend ActiveSupport::Concern
    included do
      self.primary_key = 'role_value_id'

      # Role Value fulfils Fact and Fact is an instance of Concept
      belongs_to :concept_via_fact, :class_name => 'Concept', :foreign_key => :fact_concept_guid

      # Instance plays Role Value and Instance is an instance of Concept
      belongs_to :concept_via_instance, :class_name => 'Concept', :foreign_key => :instance_concept_guid

      # Population includes Role Value
      belongs_to :population

      # Role Value is of Role
      belongs_to :role

      validates :fact_concept_guid, :presence => true
      validates :instance_concept_guid, :presence => true
      validates :population_id, :presence => true
      validates :role_id, :presence => true
    end
  end
end

module Concernz
  module SetComparisonRoles
    extend ActiveSupport::Concern
    included do
      self.primary_key = 'set_comparison_roles_id'

      # Set Comparison Roles (in which Set Comparison Constraint has in Ordinal position Role Sequence) and Set Comparison Constraint is a kind of Set Constraint and Set Constraint is a kind of Constraint and Constraint is an instance of Concept
      belongs_to :concept_via_set_comparison_constraint_set_constraint_constraint, :class_name => 'Concept', :foreign_key => :set_comparison_constraint_concept_guid

      # Set Comparison Roles (in which Set Comparison Constraint has in Ordinal position Role Sequence)
      belongs_to :role_sequence

      validates :ordinal, :presence => true
      validates :role_sequence_guid, :presence => true
      validates :set_comparison_constraint_concept_guid, :presence => true
    end
  end
end

module Concernz
  module Shape
    extend ActiveSupport::Concern
    included do
      self.primary_key = 'guid'

      # Constraint Shape is a kind of Shape and Constraint Shape is for Constraint and Constraint is an instance of Concept
      belongs_to :concept_via_constraint_shape_constraint, :class_name => 'Concept', :foreign_key => :constraint_shape_constraint_concept_guid

      # Model Note Shape is a kind of Shape and Model Note Shape is for Context Note and Context Note is an instance of Concept
      belongs_to :concept_via_model_note_shape_context_note, :class_name => 'Concept', :foreign_key => :model_note_shape_context_note_concept_guid

      # Shape is in ORM Diagram and ORM Diagram is a kind of Diagram
      belongs_to :diagram_via_orm_diagram, :class_name => 'Diagram', :foreign_key => :orm_diagram_id

      # Fact Type Shape is a kind of Shape and Fact Type Shape is for Fact Type
      belongs_to :fact_type_via_fact_type_shape, :class_name => 'FactType', :foreign_key => :fact_type_shape_fact_type_concept_guid

      # Object Type Shape is a kind of Shape and Object Type Shape is for Object Type
      belongs_to :object_type_via_object_type_shape, :class_name => 'ObjectType', :foreign_key => :object_type_shape_object_type_id

      # Reading Shape is a kind of Shape and Reading Shape is for Reading
      belongs_to :reading_via_reading_shape, :class_name => 'Reading', :foreign_key => :reading_shape_reading_id

      # Constraint Shape is a kind of Shape and Value Constraint Shape is a kind of Constraint Shape and Role Display has Value Constraint Shape
      belongs_to :role_display_via_constraint_shape_value_constraint_shape, :class_name => 'RoleDisplay', :foreign_key => :value_constraint_shape_role_display_id

      # Role Name Shape is a kind of Shape and Role Name Shape is for Role Display
      belongs_to :role_display_via_role_name_shape, :class_name => 'RoleDisplay', :foreign_key => :role_name_shape_role_display_id

      # Constraint Shape is a kind of Shape and Ring Constraint Shape is a kind of Constraint Shape and Ring Constraint Shape is attached to Fact Type Shape and Fact Type Shape is a kind of Shape
      belongs_to :shape_via_constraint_shape_ring_constraint_shape_fact_type_shape, :class_name => 'Shape', :foreign_key => :ring_constraint_shape_fact_type_shape_guid

      # Constraint Shape is a kind of Shape and Value Constraint Shape is a kind of Constraint Shape and Value Constraint Shape is for Object Type Shape and Object Type Shape is a kind of Shape
      belongs_to :shape_via_constraint_shape_value_constraint_shape_object_type_shape, :class_name => 'Shape', :foreign_key => :value_constraint_shape_object_type_shape_guid

      # Objectified Fact Type Name Shape is a kind of Shape and Objectified Fact Type Name Shape is for Fact Type Shape and Fact Type Shape is a kind of Shape
      belongs_to :shape_via_objectified_fact_type_name_shape_fact_type_shape, :class_name => 'Shape', :foreign_key => :objectified_fact_type_name_shape_fact_type_shape_guid

      # Reading Shape is a kind of Shape and Fact Type Shape has Reading Shape and Fact Type Shape is a kind of Shape
      belongs_to :shape_via_reading_shape_fact_type_shape, :class_name => 'Shape', :foreign_key => :reading_shape_fact_type_shape_guid

      # Role Display (in which Fact Type Shape displays Role in Ordinal position) and Fact Type Shape is a kind of Shape
      has_many :role_displays_via_fact_type_shape, :class_name => 'RoleDisplay', :foreign_key => :fact_type_shape_guid, :dependent => :destroy

      # Objectified Fact Type Name Shape is a kind of Shape and Objectified Fact Type Name Shape is for Fact Type Shape and Fact Type Shape is a kind of Shape
      has_one :shape_via_objectified_fact_type_name_shape_fact_type_shape, :class_name => 'Shape', :foreign_key => :objectified_fact_type_name_shape_fact_type_shape_guid, :dependent => :destroy

      # Reading Shape is a kind of Shape and Fact Type Shape has Reading Shape and Fact Type Shape is a kind of Shape
      has_one :shape_via_reading_shape_fact_type_shape, :class_name => 'Shape', :foreign_key => :reading_shape_fact_type_shape_guid, :dependent => :destroy

      # Constraint Shape is a kind of Shape and Ring Constraint Shape is a kind of Constraint Shape and Ring Constraint Shape is attached to Fact Type Shape and Fact Type Shape is a kind of Shape
      has_many :shapes_via_constraint_shape_ring_constraint_shape_fact_type_shape, :class_name => 'Shape', :foreign_key => :ring_constraint_shape_fact_type_shape_guid, :dependent => :destroy

      # Constraint Shape is a kind of Shape and Value Constraint Shape is a kind of Constraint Shape and Value Constraint Shape is for Object Type Shape and Object Type Shape is a kind of Shape
      has_many :shapes_via_constraint_shape_value_constraint_shape_object_type_shape, :class_name => 'Shape', :foreign_key => :value_constraint_shape_object_type_shape_guid, :dependent => :destroy

      validates :orm_diagram_id, :presence => true
    end
  end
end

module Concernz
  module Step
    extend ActiveSupport::Concern
    included do
      self.primary_key = 'step_id'

      # Step falls under Alternative Set
      belongs_to :alternative_set

      # Step specifies Fact Type
      belongs_to :fact_type

      # Step has input-Play
      belongs_to :input_play, :class_name => 'Play', :foreign_key => :input_play_id

      # Step has output-Play
      belongs_to :output_play, :class_name => 'Play', :foreign_key => :output_play_id

      # Step involves incidental-Play
      has_many :incidental_plays, :class_name => 'Play', :foreign_key => :step_id, :dependent => :destroy

      validates :fact_type_concept_guid, :presence => true
      validates :input_play_id, :presence => true
    end
  end
end

module Concernz
  module Value
    extend ActiveSupport::Concern
    included do
      self.primary_key = 'value_id'

      # Value is in Unit and Unit is an instance of Concept
      belongs_to :concept_via_unit, :class_name => 'Concept', :foreign_key => :unit_concept_guid

      # Value is of Value Type and Value Type is a kind of Domain Object Type and Domain Object Type is a kind of Object Type
      belongs_to :object_type_via_value_type_domain_object_type, :class_name => 'ObjectType', :foreign_key => :value_type_object_type_id

      # Allowed Range (in which Value Constraint allows Value Range) and Value Range has maximum-Bound and Bound has Value
      has_many :allowed_ranges_via_value_range_maximum_bound, :class_name => 'AllowedRange', :foreign_key => :value_range_maximum_bound_value_id, :dependent => :destroy

      # Allowed Range (in which Value Constraint allows Value Range) and Value Range has minimum-Bound and Bound has Value
      has_many :allowed_ranges_via_value_range_minimum_bound, :class_name => 'AllowedRange', :foreign_key => :value_range_minimum_bound_value_id, :dependent => :destroy

      # Instance is an instance of Concept and Instance has Value
      has_many :concepts_via_instance, :class_name => 'Concept', :foreign_key => :instance_value_id, :dependent => :destroy

      # Facet Restriction has Value
      has_many :facet_restrictions, :class_name => 'FacetRestriction', :foreign_key => :value_id, :dependent => :destroy

      # Variable is bound to Value
      has_many :variables, :class_name => 'Variable', :foreign_key => :value_id, :dependent => :destroy

      validates :literal, :presence => true
      validates :value_type_object_type_id, :presence => true
    end
  end
end

module Concernz
  module Variable
    extend ActiveSupport::Concern
    included do
      self.primary_key = 'variable_id'

      # Query includes Variable and Query is an instance of Concept
      belongs_to :concept_via_query, :class_name => 'Concept', :foreign_key => :query_concept_guid

      # Variable is for Object Type
      belongs_to :object_type

      # Variable projects Role
      belongs_to :projection, :class_name => 'Role', :foreign_key => :projection_id

      # Variable is bound to Value
      belongs_to :value

      # Aggregation (in which Variable is bound to Aggregate over aggregated-Variable)
      has_many :aggregations, :class_name => 'Aggregation', :foreign_key => :aggregated_variable_id, :dependent => :destroy

      # Aggregation (in which Variable is bound to Aggregate over aggregated-Variable)
      has_many :aggregations, :class_name => 'Aggregation', :foreign_key => :variable_id, :dependent => :destroy

      # Play (in which Variable is restricted by Role)
      has_many :plays, :class_name => 'Play', :foreign_key => :variable_id, :dependent => :destroy

      validates :object_type_id, :presence => true
      validates :ordinal, :presence => true
      validates :query_concept_guid, :presence => true
    end
  end
end
